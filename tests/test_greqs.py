from importlib.machinery import ModuleSpec
from pathlib import Path
import sys

import pytest
from greqs import main
from greqs.helper import (
    file_template,
    find_module_spec,
    get_ignore_version,
    get_req_from_dist,
    iter_import_modules,
)
from inspect import cleandoc

sys.path.insert(0, "example")


def test_pkg1():
    assert main(["pkg1"]) == ["requests", "six"]


def test_pkg2():
    assert main(["pkg2"]) == ["admin-deps"]


def test_find_module_spec():
    with pytest.raises(ModuleNotFoundError) as e:
        find_module_spec("xxx", True)
    assert e.value.msg == "No module named 'xxx'"

    with pytest.raises(ModuleNotFoundError) as e:
        find_module_spec("xxx.yyy", True)
    assert e.value.msg == "No module named 'xxx'"


def test_cli():
    # 测试命令行
    from greqs import cli

    cli.main(["--verbose", "mod1"])


def test_iter_import_modules():
    assert (
        list(
            iter_import_modules(
                cleandoc(
                    """
        import os
        from . import utils
        from .tools import translations
        from otherpkg import *
    """
                ),
                ModuleSpec(
                    "package.foo", None, is_package=True
                ),  # 代码所在模块为 __init__.py
            )
        )
        == [
            ("os", True),
            ("package", True),
            ("package.foo", True),
            ("package.foo.utils", False),
            ("package.foo.tools", True),
            ("package.foo.tools.translations", False),
            ("otherpkg", True),
        ]
    )

    assert (
        list(
            iter_import_modules(
                cleandoc(
                    """
        from . import utils
        from .tools import translations
    """
                ),
                ModuleSpec(
                    "package.foo", None, is_package=False
                ),  # 代码所在模块为普通模块
            )
        )
        == [
            ("package", True),
            ("package.utils", False),
            ("package.tools", True),
            ("package.tools.translations", False),
        ]
    )


def test_file_template():
    assert file_template("Hello") == (
        """# Generated by https://github.com/Dog-Egg/greqs\n\nHello\n"""
    )


def test_get_req_from_dist():
    import importlib_metadata as metadata

    flask_dist_info = metadata.PathDistribution(
        Path(__file__).parent / "mocks/flask-3.0.3.dist-info"
    )
    assert get_req_from_dist(flask_dist_info, False) == "Flask==3.0.3"
    assert get_req_from_dist(flask_dist_info, True) == "Flask"

    # git vcs
    zangar_dist_info = metadata.PathDistribution(
        Path(__file__).parent / "mocks/zangar-0.1.dev20250421033559.dist-info"
    )
    assert (
        get_req_from_dist(zangar_dist_info, False)
        == "git+https://github.com/Dog-Egg/Zangar@7020f81e8fee174d1912c29927edb7b9adc1a244"
    )
    assert (
        get_req_from_dist(zangar_dist_info, True)
        == "git+https://github.com/Dog-Egg/Zangar"
    )


def test_get_ignore_version():
    assert get_ignore_version("flask", ["flask"]) is True
